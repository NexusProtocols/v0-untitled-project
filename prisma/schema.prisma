// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String?        @unique
  password          String?
  discordId         String?        @unique
  discordUsername   String?
  discordAvatar     String?
  discordToken      String?
  discordRefreshToken String?
  isAdmin           Boolean        @default(false)
  isBanned          Boolean        @default(false)
  isPremium         Boolean        @default(false)
  premiumExpires    DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  lastLoginAt       DateTime?
  scripts           Script[]
  scriptRatings     ScriptRating[]
}

model Script {
  id              String         @id @default(uuid())
  title           String
  description     String
  code            String
  author          String
  authorId        String?
  user            User?          @relation(fields: [authorId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  views           Int            @default(0)
  likesCount      Int            @default(0)
  dislikesCount   Int            @default(0)
  isPremium       Boolean        @default(false)
  isNexusTeam     Boolean        @default(false)
  isVerified      Boolean        @default(false)
  keySystem       Boolean        @default(false)
  gameId          String?
  gameName        String?
  gameImage       String?
  categoriesJson  String?        // JSON string of categories
  ratings         ScriptRating[]
}

model ScriptRating {
  id        String   @id @default(uuid())
  scriptId  String
  userId    String
  isLike    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  script    Script   @relation(fields: [scriptId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([scriptId, userId])
}

model Gateway {
  id          String   @id @default(uuid())
  title       String
  description String?
  creatorId   String
  creatorName String
  imageUrl    String?
  stages      Json     // JSON array of stages
  reward      Json?    // JSON object with reward details
  settings    Json?    // JSON object with gateway settings
  stats       Json?    // JSON object with gateway stats
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GatewaySession {
  id            String   @id @default(uuid())
  gatewayId     String
  userId        String?
  completedTasks Json?    // JSON array of completed task IDs
  currentStage  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime
}

model GatewayAnalytics {
  id        String   @id @default(uuid())
  gatewayId String
  sessionId String?
  userId    String?
  action    String
  taskId    String?
  timestamp DateTime @default(now())
  metadata  Json?    // JSON object with additional data
}
